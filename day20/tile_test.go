package main

import (
	. "aoc"
	. "aoc/types"
	"strings"
	"testing"
)

func TestNewTileFromString(t *testing.T) {
	s :=
`Tile 1:
1234123412
5678567856
9012901290
3456345634
1234123412
5678567856
9012901290
3456345634
1234123412
5678567856
`
	expected := [][]rune{
		{'1','2','3','4','1','2','3','4','1','2'},
		{'5','6','7','8','5','6','7','8','5','6'},
		{'9','0','1','2','9','0','1','2','9','0'},
		{'3','4','5','6','3','4','5','6','3','4'},
		{'1','2','3','4','1','2','3','4','1','2'},
		{'5','6','7','8','5','6','7','8','5','6'},
		{'9','0','1','2','9','0','1','2','9','0'},
		{'3','4','5','6','3','4','5','6','3','4'},
		{'1','2','3','4','1','2','3','4','1','2'},
		{'5','6','7','8','5','6','7','8','5','6'},
	}

	tile := NewTileFromString(s)
	AssertEq(t, 1, tile.ID)
	AssertEq(t, expected, tile.Data)
}

func TestTile_Rotate(t *testing.T) {
	s :=
`Tile 1:
1234123412
5678567856
9012901290
3456345634
1234123412
5678567856
9012901290
3456345634
1234123412
5678567856
`
	// Rotate once
	expected := [][]rune{
		{'5','1','3','9','5','1','3','9','5','1'},
		{'6','2','4','0','6','2','4','0','6','2'},
		{'7','3','5','1','7','3','5','1','7','3'},
		{'8','4','6','2','8','4','6','2','8','4'},
		{'5','1','3','9','5','1','3','9','5','1'},
		{'6','2','4','0','6','2','4','0','6','2'},
		{'7','3','5','1','7','3','5','1','7','3'},
		{'8','4','6','2','8','4','6','2','8','4'},
		{'5','1','3','9','5','1','3','9','5','1'},
		{'6','2','4','0','6','2','4','0','6','2'},
	}

	tile := NewTileFromString(s)
	tile.Rotate()
	AssertEq(t, tile.Data, expected)

	// Rotate three more times, come back to initial state
	expected = [][]rune{
		{'1','2','3','4','1','2','3','4','1','2'},
		{'5','6','7','8','5','6','7','8','5','6'},
		{'9','0','1','2','9','0','1','2','9','0'},
		{'3','4','5','6','3','4','5','6','3','4'},
		{'1','2','3','4','1','2','3','4','1','2'},
		{'5','6','7','8','5','6','7','8','5','6'},
		{'9','0','1','2','9','0','1','2','9','0'},
		{'3','4','5','6','3','4','5','6','3','4'},
		{'1','2','3','4','1','2','3','4','1','2'},
		{'5','6','7','8','5','6','7','8','5','6'},
	}

	tile.Rotate()
	tile.Rotate()
	tile.Rotate()
	AssertEq(t, tile.Data, expected)
}

func TestTile_Variations(t *testing.T) {
	input :=
`Tile 1:
1234123412
5678567856
9012901290
3456345634
1234123412
5678567856
9012901290
3456345634
1234123412
5678567856
`

	tile := NewTileFromString(input)
	variations := tile.Variations()

	seen := NewStringSet()
	for _, tt := range variations {
		s := tt.String()
		if seen.Contains(s) {
			t.Fatal("Non-unique tile variation")
		}
		seen.Add(s)
	}

	AssertEq(t, len(variations), 8)
}

func TestTile_String(t *testing.T) {
	input :=
`Tile 1:
1234123412
5678567856
9012901290
3456345634
1234123412
5678567856
9012901290
3456345634
1234123412
5678567856
`

	expected :=
`1234123412
5678567856
9012901290
3456345634
1234123412
5678567856
9012901290
3456345634
1234123412
5678567856`

	tile := NewTileFromString(input)

	actual := strings.Trim(tile.String(), "\n")
	expected = strings.Trim(expected, "\n")
	AssertEq(t, actual, expected)
}

func TestBorders(t *testing.T) {
	input :=
`Tile 1:
1234123412
5678567856
9012901290
3456345634
1234123412
5678567856
9012901290
3456345634
1234123412
5678567856
`

	tile := NewTileFromString(input)
	left := "1593159315"
	right := "2604260426"
	top := "1234123412"
	bottom := "5678567856"

	AssertEq(t, tile.BorderLeft(), left)
	AssertEq(t, tile.BorderRight(), right)
	AssertEq(t, tile.BorderTop(), top)
	AssertEq(t, tile.BorderBottom(), bottom)
}